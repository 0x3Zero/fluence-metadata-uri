import "./dht.aqua"

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@0x3zero/aqua-lib/builtin.aqua"

const DHT_SERVICE_ID ?= ""
const IPFS_HOST ?= ""

service MyOp("op"):
  array_length(fdb: []FdbDht) -> i64

func initialize() -> FdbResult:
  Dht DHT_SERVICE_ID
  on HOST_PEER_ID:
    result <- Dht.initialize()

  <- result

func sign_and_insert(key: string, pk: string, sk: string, content: string, name: string) -> IpfsDagPutResult, FdbResult:
  Dht DHT_SERVICE_ID

  on HOST_PEER_ID:
    -- rst: *FdbResult
    -- fish_dht <- Dht.get_latest_record_by_pk_and_key(key, pk)
    signature <- Ed25519.sign(content, sk)
    -- push content to ipfs
    result <- IpfsDag.put(content, IPFS_HOST, 0)
    -- DHT
    -- if fish_dht.cid != "":
      -- rst <- Dht.insert(key, fish_dht.name, result.cid, pk, signature, content)
    -- else:
    rst <- Dht.insert(key, name, result.cid, pk, signature, content, "")

    -- block_s = BlockFormatter.serialize(name, content, result.cid)
    -- block_d = BlockFormatter.deserialize(block_s)

    -- rrs = BlockFormatter.format("OPENSEA", [block_d])
  <- result, rst

func get_metadata_uri(key: string) -> string:
  Dht DHT_SERVICE_ID

  rss: *Block

  on HOST_PEER_ID:
    results = Dht.get_records_by_key(key)
    n <- MyOp.array_length(results)

    for rst <- results par:
      rs = IpfsDag.get(rst.cid, IPFS_HOST, 0)
      sb: *string
      if rst.alias != "":
        sb <- BlockFormatter.serialize(rst.alias, rs.content, rst.cid)
      else:
        sb <- BlockFormatter.serialize(rst.public_key, rs.content, rst.cid)
      sbt = sb!
      rss <- BlockFormatter.deserialize(sbt)
    join rss[n-1]

    metadata = BlockFormatter.format("", rss)
    -- par Peer.timeout(5000, "timeout")
  <- metadata
    


