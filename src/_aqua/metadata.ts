/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.9.4
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface MyOpDef {
    array_length: (fdb: { cid: string; key: string; name: string; public_key: string; }[], callParams: CallParams$$<'fdb'>) => number | Promise<number>;
}
export function registerMyOp(service: MyOpDef): void;
export function registerMyOp(serviceId: string, service: MyOpDef): void;
export function registerMyOp(peer: FluencePeer, service: MyOpDef): void;
export function registerMyOp(peer: FluencePeer, serviceId: string, service: MyOpDef): void;
       

export function registerMyOp(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "array_length" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "fdb" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "FdbDht",
                                "fields" : {
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "name" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 
export type InitializeResult = { err_msg: string; success: boolean; }
export function initialize(
    config?: {ttl?: number}
): Promise<InitializeResult>;

export function initialize(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<InitializeResult>;

export function initialize(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call "${process.env.RELAY}" ("${process.env.DHT_SERVICE_ID}" "initialize") [] result)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "initialize",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Sign_and_insertResult = [{ cid: string; error: string; success: boolean; }, { err_msg: string; success: boolean; }]
export function sign_and_insert(
    key: string,
    pk: string,
    sk: string,
    content: string,
    name: string,
    config?: {ttl?: number}
): Promise<Sign_and_insertResult>;

export function sign_and_insert(
    peer: FluencePeer,
    key: string,
    pk: string,
    sk: string,
    content: string,
    name: string,
    config?: {ttl?: number}
): Promise<Sign_and_insertResult>;

export function sign_and_insert(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                             (call %init_peer_id% ("getDataSrv" "key") [] key)
                            )
                            (call %init_peer_id% ("getDataSrv" "pk") [] pk)
                           )
                           (call %init_peer_id% ("getDataSrv" "sk") [] sk)
                          )
                          (call %init_peer_id% ("getDataSrv" "content") [] content)
                         )
                         (call %init_peer_id% ("getDataSrv" "name") [] name)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (seq
                           (call "${process.env.PEER}" ("${process.env.ED25519_SERVICE_ID}" "sign") [content sk] signature)
                           (call "${process.env.PEER}" ("${process.env.IPFS_DAG_SERVICE_ID}" "put") [content "" 0] result)
                          )
                          (call "${process.env.PEER}" ("${process.env.DHT_SERVICE_ID}" "insert") [key name result.$.cid! pk signature content] rst)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result rst])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "sign_and_insert",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "pk" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "sk" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "content" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "name" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "IpfsDagPutResult",
                    "fields" : {
                        "cid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                },
                {
                    "tag" : "struct",
                    "name" : "FdbResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function get_metadata_uri(
    key: string,
    config?: {ttl?: number}
): Promise<string>;

export function get_metadata_uri(
    peer: FluencePeer,
    key: string,
    config?: {ttl?: number}
): Promise<string>;

export function get_metadata_uri(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "key") [] key)
                       )
                       (new $rss
                        (seq
                         (call -relay- ("op" "noop") [])
                         (xor
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (call "${process.env.PEER}" ("${process.env.DHT_SERVICE_ID}" "get_records_by_key") [key] get_records_by_key)
                                  (call "${process.env.PEER}" ("op" "array_length") [get_records_by_key] n)
                                 )
                                 (par
                                  (fold get_records_by_key rst-0
                                   (par
                                    (seq
                                     (seq
                                      (seq
                                       (call "${process.env.PEER}" ("${process.env.IPFS_DAG_SERVICE_ID}" "get") [rst-0.$.cid! "" 0] get)
                                       (null)
                                      )
                                      (call "${process.env.PEER}" ("${process.env.BLOCK_FORMATTER_SERVICE_ID}" "serialize") [rst-0.$.name! get.$.content! rst-0.$.cid!] serialize)
                                     )
                                     (call "${process.env.PEER}" ("${process.env.BLOCK_FORMATTER_SERVICE_ID}" "deserialize") [serialize] $rss)
                                    )
                                    (next rst-0)
                                   )
                                   (never)
                                  )
                                  (null)
                                 )
                                )
                                (call "${process.env.PEER}" ("math" "sub") [n 1] sub)
                               )
                               (new $rss_test
                                (seq
                                 (seq
                                  (seq
                                   (call "${process.env.PEER}" ("math" "add") [sub 1] rss_incr)
                                   (fold $rss s
                                    (seq
                                     (seq
                                      (ap s $rss_test)
                                      (canon "${process.env.PEER}" $rss_test  #rss_iter_canon)
                                     )
                                     (xor
                                      (match #rss_iter_canon.length rss_incr
                                       (null)
                                      )
                                      (next s)
                                     )
                                    )
                                    (never)
                                   )
                                  )
                                  (canon "${process.env.PEER}" $rss_test  #rss_result_canon)
                                 )
                                 (ap #rss_result_canon rss_gate)
                                )
                               )
                              )
                              (call "${process.env.PEER}" ("math" "sub") [n 1] sub-0)
                             )
                             (canon "${process.env.PEER}" $rss  #rss_canon)
                            )
                            (call "${process.env.PEER}" ("${process.env.BLOCK_FORMATTER_SERVICE_ID}" "format") ["" #rss_canon] format)
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [format])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadata_uri",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
