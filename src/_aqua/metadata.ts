/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.9.4
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

// Functions
 
export type Get_metadata_uriResult = { err_msg: string; metadatas: { alias: string; cid: string; data_key: string; hash: string; public_key: string; }[]; success: boolean; }
export function get_metadata_uri(
    key: string,
    config?: {ttl?: number}
): Promise<Get_metadata_uriResult>;

export function get_metadata_uri(
    peer: FluencePeer,
    key: string,
    config?: {ttl?: number}
): Promise<Get_metadata_uriResult>;

export function get_metadata_uri(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "key") [] key)
                       )
                       (xor
                        (call -relay- ("transaction" "get_metadatas") [key] results)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadata_uri",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadatasResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "metadatas" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Metadata",
                                "fields" : {
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Ipfs_getResult = { content: string; error: string; success: boolean; }
export function ipfs_get(
    cid: string,
    config?: {ttl?: number}
): Promise<Ipfs_getResult>;

export function ipfs_get(
    peer: FluencePeer,
    cid: string,
    config?: {ttl?: number}
): Promise<Ipfs_getResult>;

export function ipfs_get(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                       )
                       (xor
                        (call -relay- ("ipfs_dag" "get") [cid "" 0] result)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "ipfs_get",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "IpfsDagGetResult",
                    "fields" : {
                        "content" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_metadatasResult = { err_msg: string; metadatas: { alias: string; cid: string; data_key: string; hash: string; public_key: string; }[]; success: boolean; }
export function get_metadatas(
    data_key: string,
    config?: {ttl?: number}
): Promise<Get_metadatasResult>;

export function get_metadatas(
    peer: FluencePeer,
    data_key: string,
    config?: {ttl?: number}
): Promise<Get_metadatasResult>;

export function get_metadatas(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "data_key") [] data_key)
                       )
                       (xor
                        (call -relay- ("transaction" "get_metadatas") [data_key] result)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadatas",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "data_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadatasResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "metadatas" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Metadata",
                                "fields" : {
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
